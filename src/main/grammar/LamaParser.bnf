{
  parserClass="ru.mse.itmo.lama.language.parser.LamaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LamaWTF"
  psiImplClassSuffix="ImplWTF"
  psiPackage="ru.mse.itmo.lama.language.psi"
  psiImplPackage="ru.mse.itmo.lama.language.psi.impl"

  elementTypeHolderClass="ru.mse.itmo.lama.language.psi.LamaTypes"
  elementTypeClass="ru.mse.itmo.lama.language.psi.LamaElementType"
  tokenTypeClass="ru.mse.itmo.lama.language.psi.LamaTokenType"

  tokens=[
    // Section keywords
    after='after'
    esac='esac'
    infixl='infixl'
    syntax='syntax'
    array='array'
    eta='eta'
    infixr='infixr'
    then='then'
    at='at'
    false='false'
    lazy='lazy'
    true='true'
    before='before'
    fi='fi'
    od='od'
    val='val'
    box='box'
    for='for'
    of='of'
    var='var'
    case='case'
    fun='fun'
    public='public'
    while='while'
    do='do'
    if='if'
    sexp='sexp'
    elif='elif'
    import='import'
    skip='skip'
    else='else'
    infix='infix'
    str='str'

    // operators
    hence='->'
    alt='|'
    sharp='#'

    // brackets
    lb='('
    rb=')'
    lcurly='{'
    rcurly='}'
    lsquare='['
    rsquare=']'

    // Section 2.1.1
    space='regexp:\s+'
    singleComment='regexp:--[^\r\n]*'
    multiComment='regexp:\(\*(.|\n)*\*\)'

    // Section 2.1.2
    uident='regexp:[A-Z][a-zA-Z_0-9]*'
    lident='regexp:[a-z][a-zA-Z_0-9]*'
    decimal='regexp:-?[0-9]+'
    string="regexp:\"([^\"\\]|\\.)*\""
    char="regexp:'([^']|''|\n|\t)'"

    infixop="regexp:[+*/%$#@!|&\^?<>:=\\-]+"
  ]
}

compilationUnit ::= importRule * scopeExpression

importRule ::= import uident ';'

scopeExpression ::= definition * [ expression ]

definition ::=
    variableDefinition
    | functionDefinition
    | infixDefinition

variableDefinition ::= ( var | public ) variableDefinitionSeq ';'

variableDefinitionSeq ::= variableDefinitionItem ( ',' variableDefinitionItem ) *

variableDefinitionItem ::= lident [ '=' basicExpression ]

functionDefinition ::= [ public ] fun lident '(' functionArguments ')' functionBody

functionArguments ::= [ functionArgument ( ',' functionArgument ) * ]

functionArgument ::=
    lident |
    pattern

functionBody ::= '{' scopeExpression '}'

infixDefinition ::= infixHead '(' functionArguments ')' functionBody

infixHead ::= [ public ] infixity infixop level

infixity ::=
    infix
    | infixl
    | infixr

level ::= [ at | before | after ] infixop

expression ::= basicExpression [ ';' expression ]

basicExpression ::= disjunction

disjunction ::= conjunction ( '!!' conjunction ) *

conjunction ::= equality ( '&&' equality ) *

equality ::= comparison (('==' | '!=') comparison ) *

comparison ::= additive ( ('<' | '>' | '<=' | '>=') additive ) *

additive ::= multiplicative ( ('+' | '-') multiplicative ) *

multiplicative ::= customOperatorExpression ( ('*' | '/' | '%') customOperatorExpression ) *

customOperatorExpression ::= dotNotation ( infixop dotNotation ) *

dotNotation ::= postfixExpression ( '.' (functionCall | lident) ) *

postfixExpression ::=
    primary      |
    functionCall |
    arrayIndexing

functionCall ::=
    postfixExpression '(' [ expression ( ',' expression ) * ] ')' {extends=postfixExpression}

arrayIndexing ::=
    postfixExpression '[' expression ']' {extends=postfixExpression}

primary ::=
    decimal                 |
    string                  |
    char                    |
    lident                  |
    true                    |
    false                   |
    infix infixop           |
    fun '(' functionArguments ')' functionBody |
    skip                    |
    syntaxExpression        |
    '(' scopeExpression ')'   |
    listExpression          |
    arrayExpression         |
    sExpression             |
    ifExpression            |
    whileDoExpression       |
    doWhileExpression       |
    forExpression           |
    caseExpression
    {extends=postfixExpression}

listExpression ::=
    '{' [ expression ( ',' expression ) * ] '}'

arrayExpression ::=
    '[' [ expression ( ',' expression ) * ] ']'

sExpression ::=
    uident [ '(' expression [ ( ',' expression ) * ] ')' ]

ifExpression ::=
    if expression then scopeExpression [ elsePart ] fi

elsePart ::=
    elif expression then scopeExpression [ elsePart ] |
    else scopeExpression

whileDoExpression ::= while expression do scopeExpression od

doWhileExpression ::= do scopeExpression while expression od

forExpression ::=
    for scopeExpression ',' expression ',' expression do scopeExpression od

caseExpression ::= case expression of caseBranches esac

caseBranches ::= caseBranch [ ( alt caseBranch ) * ]

caseBranch ::= pattern hence scopeExpression

pattern ::=
    consPattern
    | simplePattern

consPattern ::= simplePattern  ':' pattern

simplePattern ::=
    wildcardPattern
    | sExprPattern
    | arrayPattern
    | listPattern
    | lident [ '@' pattern ]
    | [ '-' ] decimal
    | string
    | char
    | true
    | false
    | sharp box
    | sharp val
    | sharp str
    | sharp array
    | sharp sexp
    | sharp fun
    | '(' pattern ')'

wildcardPattern ::= '_'

sExprPattern ::= uident [ '(' pattern ( ',' pattern ) * ')' ]

arrayPattern ::= '[' [ pattern ( ',' pattern ) * ] ']'

listPattern ::= '{' [ pattern ( ',' pattern ) * ] '}'

syntaxExpression ::= syntax '(' syntaxSeq (alt syntaxSeq ) * ')'

syntaxSeq ::= syntaxBinding + [ '{' expression '}' ]

syntaxBinding ::= [ '-' ] [ pattern '=' ] syntaxPostfix

syntaxPostfix ::= syntaxPrimary [ ('*' | '+' | '?' ) ]

syntaxPrimary ::=
    lident ( '[' [ expression ( ',' expression ) * ] ']' ) *
    | '(' syntaxExpression ')'
    | '$(' expression ')'
