/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package ru.mse.itmo.lama.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static ru.mse.itmo.lama.language.psi.LamaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/admen/Рабочий стол/lama-plugin/src/main/grammar/LamaLexer.flex</tt>
 */
public class _LamaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\22\1\15\1\52\3\22\1\16\1\6\1\10\1\7\1\22"+
    "\1\0\1\5\1\0\1\22\12\14\1\22\1\0\2\22\1\50\2\22\32\11\1\55\1\17\1\56\1\22"+
    "\1\12\1\0\1\23\1\40\1\30\1\42\1\25\1\24\1\13\1\35\1\31\1\13\1\47\1\33\1\46"+
    "\1\20\1\41\1\44\1\13\1\26\1\27\1\21\1\37\1\43\1\45\1\32\1\34\1\36\1\53\1\51"+
    "\1\54\7\0\1\1\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\1\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\2\1\16\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\0\1\21\3\0\2\7"+
    "\1\22\3\7\1\23\13\7\1\24\4\7\1\25\1\26"+
    "\1\27\3\7\1\0\1\30\5\7\1\31\1\32\1\33"+
    "\3\7\1\34\10\7\1\35\1\36\1\37\2\7\1\40"+
    "\1\41\1\42\3\7\1\43\1\44\1\45\1\46\1\7"+
    "\1\47\1\50\2\7\1\51\3\7\1\52\1\53\1\54"+
    "\1\7\1\55\3\7\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\353\0\353\0\57\0\57\0\57\0\57"+
    "\0\u0497\0\353\0\u04c6\0\u01a7\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u0149\0\u060f\0\u063e\0\u066d\0\u0149\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u0149\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u0149"+
    "\0\u0149\0\u0149\0\u095d\0\u098c\0\u09bb\0\u09ea\0\57\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0149\0\u0149\0\u0149\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0149\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0149\0\u0149\0\u0149\0\u0d09\0\u0d38"+
    "\0\u04c6\0\u0149\0\u0149\0\u0d67\0\u0d96\0\u0dc5\0\u0149\0\u0149"+
    "\0\u0149\0\u0149\0\u0df4\0\u0149\0\u0149\0\u0e23\0\u0e52\0\u0149"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0149\0\u0149\0\u0149\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0149\0\u0149\0\u0149\0\u0149\0\u0149"+
    "\0\u0149\0\u0149";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\6\1\11\1\15\1\6"+
    "\1\16\1\17\1\20\1\11\1\21\1\22\1\23\1\11"+
    "\1\24\4\11\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\11\1\6\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\60\0\4\3\57\0\1\41\1\0\1\6\7\0\1\6"+
    "\2\0\1\6\25\0\1\42\2\6\13\0\1\43\54\0"+
    "\1\6\1\0\1\6\7\0\1\6\2\0\1\6\25\0"+
    "\3\6\15\0\4\10\3\0\2\10\1\0\25\10\20\0"+
    "\4\11\3\0\2\11\1\0\25\11\23\0\1\12\42\0"+
    "\15\44\1\45\41\44\16\46\1\47\1\50\37\46\11\0"+
    "\4\11\3\0\2\11\1\0\3\11\1\51\6\11\1\52"+
    "\12\11\20\0\4\11\3\0\1\11\1\53\1\0\1\11"+
    "\1\54\1\11\1\55\21\11\20\0\4\11\3\0\2\11"+
    "\1\0\1\56\5\11\1\57\5\11\1\60\1\11\1\61"+
    "\6\11\20\0\4\11\3\0\1\11\1\62\1\0\4\11"+
    "\1\63\3\11\1\64\14\11\20\0\4\11\3\0\1\11"+
    "\1\65\1\0\2\11\1\66\6\11\1\67\12\11\1\70"+
    "\20\0\4\11\3\0\2\11\1\0\1\71\24\11\20\0"+
    "\4\11\3\0\1\72\1\11\1\0\1\11\1\73\21\11"+
    "\1\74\1\11\20\0\4\11\3\0\2\11\1\0\1\75"+
    "\24\11\20\0\4\11\3\0\2\11\1\0\2\11\1\76"+
    "\13\11\1\77\6\11\20\0\4\11\3\0\2\11\1\0"+
    "\1\11\1\100\15\11\1\101\5\11\20\0\4\11\3\0"+
    "\2\11\1\0\16\11\1\102\6\11\20\0\4\11\3\0"+
    "\2\11\1\0\1\103\24\11\20\0\4\11\3\0\2\11"+
    "\1\0\14\11\1\104\10\11\20\0\4\11\3\0\2\11"+
    "\1\0\12\11\1\105\12\11\7\0\2\41\2\0\53\41"+
    "\1\43\1\0\1\43\1\0\3\43\1\106\47\43\15\0"+
    "\1\44\57\0\1\107\56\0\1\46\56\0\1\107\1\0"+
    "\2\46\46\0\4\11\3\0\2\11\1\0\14\11\1\110"+
    "\10\11\20\0\4\11\3\0\2\11\1\0\2\11\1\111"+
    "\22\11\20\0\4\11\3\0\1\11\1\112\1\0\25\11"+
    "\20\0\4\11\3\0\2\11\1\0\3\11\1\113\21\11"+
    "\20\0\4\11\3\0\2\11\1\0\10\11\1\114\14\11"+
    "\20\0\4\11\3\0\1\115\1\11\1\0\25\11\20\0"+
    "\4\11\3\0\2\11\1\0\3\11\1\116\21\11\20\0"+
    "\4\11\3\0\2\11\1\0\1\117\24\11\20\0\4\11"+
    "\3\0\2\11\1\0\1\120\24\11\20\0\4\11\3\0"+
    "\2\11\1\0\4\11\1\121\1\11\1\122\16\11\20\0"+
    "\4\11\3\0\2\11\1\0\3\11\1\123\21\11\20\0"+
    "\4\11\3\0\2\11\1\0\7\11\1\124\15\11\20\0"+
    "\4\11\3\0\1\125\1\11\1\0\25\11\20\0\4\11"+
    "\3\0\2\11\1\0\6\11\1\126\16\11\20\0\4\11"+
    "\3\0\2\11\1\0\4\11\1\127\20\11\20\0\4\11"+
    "\3\0\2\11\1\0\1\11\1\130\23\11\20\0\4\11"+
    "\3\0\2\11\1\0\21\11\1\131\3\11\20\0\4\11"+
    "\3\0\2\11\1\0\13\11\1\132\11\11\20\0\4\11"+
    "\3\0\2\11\1\0\1\11\1\133\23\11\20\0\4\11"+
    "\3\0\2\11\1\0\7\11\1\134\15\11\20\0\4\11"+
    "\3\0\2\11\1\0\3\11\1\135\4\11\1\136\14\11"+
    "\20\0\4\11\3\0\2\11\1\0\15\11\1\137\7\11"+
    "\20\0\4\11\3\0\2\11\1\0\6\11\1\140\16\11"+
    "\7\0\1\43\1\0\1\43\1\0\3\43\1\106\1\141"+
    "\46\43\11\0\4\11\3\0\2\11\1\0\2\11\1\142"+
    "\22\11\20\0\4\11\3\0\1\143\1\11\1\0\25\11"+
    "\20\0\4\11\3\0\2\11\1\0\2\11\1\144\22\11"+
    "\20\0\4\11\3\0\2\11\1\0\1\145\24\11\20\0"+
    "\4\11\3\0\2\11\1\0\4\11\1\146\20\11\20\0"+
    "\4\11\3\0\2\11\1\0\5\11\1\147\17\11\20\0"+
    "\4\11\3\0\2\11\1\0\2\11\1\150\22\11\20\0"+
    "\4\11\3\0\2\11\1\0\1\11\1\151\23\11\20\0"+
    "\4\11\3\0\2\11\1\0\21\11\1\152\3\11\20\0"+
    "\4\11\3\0\1\11\1\153\1\0\25\11\20\0\4\11"+
    "\3\0\2\11\1\0\21\11\1\154\3\11\20\0\4\11"+
    "\3\0\2\11\1\0\2\11\1\155\22\11\20\0\4\11"+
    "\3\0\2\11\1\0\6\11\1\156\16\11\20\0\4\11"+
    "\3\0\2\11\1\0\16\11\1\157\6\11\20\0\4\11"+
    "\3\0\2\11\1\0\11\11\1\160\13\11\20\0\4\11"+
    "\3\0\2\11\1\0\16\11\1\161\6\11\20\0\4\11"+
    "\3\0\2\11\1\0\10\11\1\162\14\11\20\0\4\11"+
    "\3\0\2\11\1\0\10\11\1\163\14\11\20\0\4\11"+
    "\3\0\2\11\1\0\3\11\1\164\21\11\20\0\4\11"+
    "\3\0\2\11\1\0\11\11\1\165\13\11\20\0\4\11"+
    "\3\0\2\11\1\0\2\11\1\166\22\11\20\0\4\11"+
    "\3\0\2\11\1\0\1\167\24\11\20\0\4\11\3\0"+
    "\2\11\1\0\7\11\1\170\15\11\20\0\4\11\3\0"+
    "\2\11\1\0\3\11\1\171\21\11\20\0\4\11\3\0"+
    "\2\11\1\0\3\11\1\172\21\11\20\0\4\11\3\0"+
    "\2\11\1\0\6\11\1\173\16\11\20\0\4\11\3\0"+
    "\2\11\1\0\2\11\1\174\22\11\20\0\4\11\3\0"+
    "\2\11\1\0\7\11\1\175\15\11\20\0\4\11\3\0"+
    "\2\11\1\0\3\11\1\176\4\11\1\177\14\11\20\0"+
    "\4\11\3\0\1\11\1\200\1\0\25\11\20\0\4\11"+
    "\3\0\2\11\1\0\2\11\1\201\22\11\20\0\4\11"+
    "\3\0\2\11\1\0\5\11\1\202\17\11\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4089];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\25\1\4\11\2\1\2\0"+
    "\1\1\3\0\35\1\1\0\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _LamaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LamaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 53: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 3: 
            { return INFIXOP;
            } 
            // fall through
          case 55: break;
          case 4: 
            { return LB;
            } 
            // fall through
          case 56: break;
          case 5: 
            { return RB;
            } 
            // fall through
          case 57: break;
          case 6: 
            { return UIDENT;
            } 
            // fall through
          case 58: break;
          case 7: 
            { return LIDENT;
            } 
            // fall through
          case 59: break;
          case 8: 
            { return DECIMAL;
            } 
            // fall through
          case 60: break;
          case 9: 
            { return ALT;
            } 
            // fall through
          case 61: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 62: break;
          case 11: 
            { return LCURLY;
            } 
            // fall through
          case 63: break;
          case 12: 
            { return RCURLY;
            } 
            // fall through
          case 64: break;
          case 13: 
            { return LSQUARE;
            } 
            // fall through
          case 65: break;
          case 14: 
            { return RSQUARE;
            } 
            // fall through
          case 66: break;
          case 15: 
            { return SINGLECOMMENT;
            } 
            // fall through
          case 67: break;
          case 16: 
            { return HENCE;
            } 
            // fall through
          case 68: break;
          case 17: 
            { return STRING;
            } 
            // fall through
          case 69: break;
          case 18: 
            { return AT;
            } 
            // fall through
          case 70: break;
          case 19: 
            { return FI;
            } 
            // fall through
          case 71: break;
          case 20: 
            { return IF;
            } 
            // fall through
          case 72: break;
          case 21: 
            { return OF;
            } 
            // fall through
          case 73: break;
          case 22: 
            { return OD;
            } 
            // fall through
          case 74: break;
          case 23: 
            { return DO;
            } 
            // fall through
          case 75: break;
          case 24: 
            { return CHAR;
            } 
            // fall through
          case 76: break;
          case 25: 
            { return FUN;
            } 
            // fall through
          case 77: break;
          case 26: 
            { return FOR;
            } 
            // fall through
          case 78: break;
          case 27: 
            { return ETA;
            } 
            // fall through
          case 79: break;
          case 28: 
            { return STR;
            } 
            // fall through
          case 80: break;
          case 29: 
            { return BOX;
            } 
            // fall through
          case 81: break;
          case 30: 
            { return VAR;
            } 
            // fall through
          case 82: break;
          case 31: 
            { return VAL;
            } 
            // fall through
          case 83: break;
          case 32: 
            { return MULTICOMMENT;
            } 
            // fall through
          case 84: break;
          case 33: 
            { return TRUE;
            } 
            // fall through
          case 85: break;
          case 34: 
            { return THEN;
            } 
            // fall through
          case 86: break;
          case 35: 
            { return ESAC;
            } 
            // fall through
          case 87: break;
          case 36: 
            { return ELSE;
            } 
            // fall through
          case 88: break;
          case 37: 
            { return ELIF;
            } 
            // fall through
          case 89: break;
          case 38: 
            { return SEXP;
            } 
            // fall through
          case 90: break;
          case 39: 
            { return SKIP;
            } 
            // fall through
          case 91: break;
          case 40: 
            { return CASE;
            } 
            // fall through
          case 92: break;
          case 41: 
            { return LAZY;
            } 
            // fall through
          case 93: break;
          case 42: 
            { return AFTER;
            } 
            // fall through
          case 94: break;
          case 43: 
            { return ARRAY;
            } 
            // fall through
          case 95: break;
          case 44: 
            { return FALSE;
            } 
            // fall through
          case 96: break;
          case 45: 
            { return INFIX;
            } 
            // fall through
          case 97: break;
          case 46: 
            { return WHILE;
            } 
            // fall through
          case 98: break;
          case 47: 
            { return SYNTAX;
            } 
            // fall through
          case 99: break;
          case 48: 
            { return INFIXR;
            } 
            // fall through
          case 100: break;
          case 49: 
            { return INFIXL;
            } 
            // fall through
          case 101: break;
          case 50: 
            { return IMPORT;
            } 
            // fall through
          case 102: break;
          case 51: 
            { return BEFORE;
            } 
            // fall through
          case 103: break;
          case 52: 
            { return PUBLIC;
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
